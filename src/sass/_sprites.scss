/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$big-dove-name: 'big-dove';
$big-dove-x: 0px;
$big-dove-y: 0px;
$big-dove-offset-x: 0px;
$big-dove-offset-y: 0px;
$big-dove-width: 285px;
$big-dove-height: 137px;
$big-dove-total-width: 433px;
$big-dove-total-height: 304px;
$big-dove-image: '../images/sprite.png';
$big-dove: (0px, 0px, 0px, 0px, 285px, 137px, 433px, 304px, '../images/sprite.png', 'big-dove', );
$close-name: 'close';
$close-x: 389px;
$close-y: 52px;
$close-offset-x: -389px;
$close-offset-y: -52px;
$close-width: 26px;
$close-height: 27px;
$close-total-width: 433px;
$close-total-height: 304px;
$close-image: '../images/sprite.png';
$close: (389px, 52px, -389px, -52px, 26px, 27px, 433px, 304px, '../images/sprite.png', 'close', );
$dove-name: 'dove';
$dove-x: 285px;
$dove-y: 52px;
$dove-offset-x: -285px;
$dove-offset-y: -52px;
$dove-width: 104px;
$dove-height: 72px;
$dove-total-width: 433px;
$dove-total-height: 304px;
$dove-image: '../images/sprite.png';
$dove: (285px, 52px, -285px, -52px, 104px, 72px, 433px, 304px, '../images/sprite.png', 'dove', );
$hand-name: 'hand';
$hand-x: 389px;
$hand-y: 79px;
$hand-offset-x: -389px;
$hand-offset-y: -79px;
$hand-width: 19px;
$hand-height: 21px;
$hand-total-width: 433px;
$hand-total-height: 304px;
$hand-image: '../images/sprite.png';
$hand: (389px, 79px, -389px, -79px, 19px, 21px, 433px, 304px, '../images/sprite.png', 'hand', );
$logotype-name: 'logotype';
$logotype-x: 285px;
$logotype-y: 0px;
$logotype-offset-x: -285px;
$logotype-offset-y: 0px;
$logotype-width: 148px;
$logotype-height: 52px;
$logotype-total-width: 433px;
$logotype-total-height: 304px;
$logotype-image: '../images/sprite.png';
$logotype: (285px, 0px, -285px, 0px, 148px, 52px, 433px, 304px, '../images/sprite.png', 'logotype', );
$top-corner-name: 'top-corner';
$top-corner-x: 0px;
$top-corner-y: 137px;
$top-corner-offset-x: 0px;
$top-corner-offset-y: -137px;
$top-corner-width: 205px;
$top-corner-height: 167px;
$top-corner-total-width: 433px;
$top-corner-total-height: 304px;
$top-corner-image: '../images/sprite.png';
$top-corner: (0px, 137px, 0px, -137px, 205px, 167px, 433px, 304px, '../images/sprite.png', 'top-corner', );
$spritesheet-width: 433px;
$spritesheet-height: 304px;
$spritesheet-image: '../images/sprite.png';
$spritesheet-sprites: ($big-dove, $close, $dove, $hand, $logotype, $top-corner, );
$spritesheet: (433px, 304px, '../images/sprite.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
